commit 5767a6b9b511ca939170ef04b536effef6500fc9
Author: Sidharth-Singh10 <sidharthsingh714@gmail.com>
Date:   Sun Jun 1 22:56:31 2025 +0530

    feat(workflow): WF complete-all modules of workflow tested and working

diff --git a/.gitignore b/.gitignore
index 813af6b..e829611 100644
--- a/.gitignore
+++ b/.gitignore
@@ -5,3 +5,4 @@
 # Code coverage
 lcov.info
 /coverage
+.env
\ No newline at end of file
diff --git a/Cargo.lock b/Cargo.lock
index c897dd4..22c6ce2 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -2,6 +2,45 @@
 # It is not intended for manual editing.
 version = 4
 
+[[package]]
+name = "addr2line"
+version = "0.24.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "dfbe277e56a376000877090da837660b4427aad530e3028d44e0bffe4f89a1c1"
+dependencies = [
+ "gimli",
+]
+
+[[package]]
+name = "adler2"
+version = "2.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "512761e0bb2578dd7380c6baaa0f4ce03e84f95e960231d1dec8bf4d7d6e2627"
+
+[[package]]
+name = "aho-corasick"
+version = "1.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"
+dependencies = [
+ "memchr",
+]
+
+[[package]]
+name = "android-tzdata"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"
+
+[[package]]
+name = "android_system_properties"
+version = "0.1.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
+dependencies = [
+ "libc",
+]
+
 [[package]]
 name = "anstream"
 version = "0.6.18"
@@ -38,7 +77,7 @@ version = "1.1.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "79947af37f4177cfead1110013d678905c37501914fba0efea834c3fe9a8d60c"
 dependencies = [
- "windows-sys",
+ "windows-sys 0.59.0",
 ]
 
 [[package]]
@@ -49,9 +88,53 @@ checksum = "ca3534e77181a9cc07539ad51f2141fe32f6c3ffd4df76db8ad92346b003ae4e"
 dependencies = [
  "anstyle",
  "once_cell",
- "windows-sys",
+ "windows-sys 0.59.0",
+]
+
+[[package]]
+name = "async-trait"
+version = "0.1.88"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e539d3fca749fcee5236ab05e93a52867dd549cc157c8cb7f99595f3cedffdb5"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+]
+
+[[package]]
+name = "atomic-waker"
+version = "1.1.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1505bd5d3d116872e7271a6d4e16d81d0c8570876c8de68093a09ac269d8aac0"
+
+[[package]]
+name = "autocfg"
+version = "1.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ace50bade8e6234aa140d9a2f552bbee1db4d353f69b8217bc503490fc1a9f26"
+
+[[package]]
+name = "backtrace"
+version = "0.3.75"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6806a6321ec58106fea15becdad98371e28d92ccbc7c8f1b3b6dd724fe8f1002"
+dependencies = [
+ "addr2line",
+ "cfg-if",
+ "libc",
+ "miniz_oxide",
+ "object",
+ "rustc-demangle",
+ "windows-targets",
 ]
 
+[[package]]
+name = "base64"
+version = "0.22.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "72b3254f16251a8381aa12e40e3c4d2f0199f8c6508fbecb9d91f575e0fbb8c6"
+
 [[package]]
 name = "bgit"
 version = "0.2.1"
@@ -61,7 +144,9 @@ dependencies = [
  "colored",
  "dialoguer",
  "git2",
+ "google-generative-ai-rs",
  "indicatif",
+ "tokio",
 ]
 
 [[package]]
@@ -76,6 +161,24 @@ version = "3.17.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "1628fb46dfa0b37568d12e5edd512553eccf6a22a78e8bde00bb4aed84d5bdbf"
 
+[[package]]
+name = "bytecount"
+version = "0.6.8"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5ce89b21cab1437276d2650d57e971f9d548a2d9037cc231abdc0562b97498ce"
+
+[[package]]
+name = "bytes"
+version = "1.10.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d71b6127be86fdcfddb610f7182ac57211d4b18a3e9c82eb2d17662f2227ad6a"
+
+[[package]]
+name = "cargo-husky"
+version = "1.5.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7b02b629252fe8ef6460461409564e2c21d0c8e77e0944f3d189ff06c4e932ad"
+
 [[package]]
 name = "cc"
 version = "1.2.16"
@@ -93,6 +196,27 @@ version = "1.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"
 
+[[package]]
+name = "cfg_aliases"
+version = "0.2.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "613afe47fcd5fac7ccf1db93babcb082c5994d996f20b8b159f2ad1658eb5724"
+
+[[package]]
+name = "chrono"
+version = "0.4.41"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
+dependencies = [
+ "android-tzdata",
+ "iana-time-zone",
+ "js-sys",
+ "num-traits",
+ "serde",
+ "wasm-bindgen",
+ "windows-link",
+]
+
 [[package]]
 name = "clap"
 version = "4.5.31"
@@ -154,7 +278,7 @@ version = "3.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "fde0e0ec90c9dfb3b4b1a0891a7dcd0e2bffde2f7efed5fe7c9bb00e5bfb915e"
 dependencies = [
- "windows-sys",
+ "windows-sys 0.59.0",
 ]
 
 [[package]]
@@ -167,9 +291,25 @@ dependencies = [
  "libc",
  "once_cell",
  "unicode-width",
- "windows-sys",
+ "windows-sys 0.59.0",
+]
+
+[[package]]
+name = "core-foundation"
+version = "0.10.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b2a6cd9ae233e7f62ba4e9353e81a88df7fc8a5987b8d445b4d90c879bd156f6"
+dependencies = [
+ "core-foundation-sys",
+ "libc",
 ]
 
+[[package]]
+name = "core-foundation-sys"
+version = "0.8.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"
+
 [[package]]
 name = "dialoguer"
 version = "0.11.0"
@@ -179,7 +319,7 @@ dependencies = [
  "console",
  "shell-words",
  "tempfile",
- "thiserror",
+ "thiserror 1.0.69",
  "zeroize",
 ]
 
@@ -200,6 +340,35 @@ version = "1.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "34aa73646ffb006b8f5147f3dc182bd4bcb190227ce861fc4a4844bf8e3cb2c0"
 
+[[package]]
+name = "env_filter"
+version = "0.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "186e05a59d4c50738528153b83b0b0194d3a29507dfec16eccd4b342903397d0"
+dependencies = [
+ "log",
+ "regex",
+]
+
+[[package]]
+name = "env_logger"
+version = "0.11.8"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "13c863f0904021b108aa8b2f55046443e6b1ebde8fd4a15c399893aae4fa069f"
+dependencies = [
+ "anstream",
+ "anstyle",
+ "env_filter",
+ "jiff",
+ "log",
+]
+
+[[package]]
+name = "equivalent"
+version = "1.0.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "877a4ace8713b0bcf2a4e7eec82529c029f1d0619886d18145fea96c3ffe5c0f"
+
 [[package]]
 name = "errno"
 version = "0.3.10"
@@ -207,7 +376,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "33d852cb9b869c2a9b3df2f71a3074817f01e1844f839a144f5fcef059a4eb5d"
 dependencies = [
  "libc",
- "windows-sys",
+ "windows-sys 0.59.0",
 ]
 
 [[package]]
@@ -216,6 +385,12 @@ version = "2.3.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "37909eebbb50d72f9059c3b6d82c0463f2ff062c9e95845c43a6c9c0355411be"
 
+[[package]]
+name = "fnv"
+version = "1.0.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1"
+
 [[package]]
 name = "form_urlencoded"
 version = "1.2.1"
@@ -225,6 +400,135 @@ dependencies = [
  "percent-encoding",
 ]
 
+[[package]]
+name = "futures"
+version = "0.3.31"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "65bc07b1a8bc7c85c5f2e110c476c7389b4554ba72af57d8445ea63a576b0876"
+dependencies = [
+ "futures-channel",
+ "futures-core",
+ "futures-executor",
+ "futures-io",
+ "futures-sink",
+ "futures-task",
+ "futures-util",
+]
+
+[[package]]
+name = "futures-channel"
+version = "0.3.31"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2dff15bf788c671c1934e366d07e30c1814a8ef514e1af724a602e8a2fbe1b10"
+dependencies = [
+ "futures-core",
+ "futures-sink",
+]
+
+[[package]]
+name = "futures-core"
+version = "0.3.31"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "05f29059c0c2090612e8d742178b0580d2dc940c837851ad723096f87af6663e"
+
+[[package]]
+name = "futures-executor"
+version = "0.3.31"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1e28d1d997f585e54aebc3f97d39e72338912123a67330d723fdbb564d646c9f"
+dependencies = [
+ "futures-core",
+ "futures-task",
+ "futures-util",
+]
+
+[[package]]
+name = "futures-io"
+version = "0.3.31"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9e5c1b78ca4aae1ac06c48a526a655760685149f0d465d21f37abfe57ce075c6"
+
+[[package]]
+name = "futures-macro"
+version = "0.3.31"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "162ee34ebcb7c64a8abebc059ce0fee27c2262618d7b60ed8faf72fef13c3650"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+]
+
+[[package]]
+name = "futures-sink"
+version = "0.3.31"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e575fab7d1e0dcb8d0c7bcf9a63ee213816ab51902e6d244a95819acacf1d4f7"
+
+[[package]]
+name = "futures-task"
+version = "0.3.31"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f90f7dce0722e95104fcb095585910c0977252f286e354b5e3bd38902cd99988"
+
+[[package]]
+name = "futures-util"
+version = "0.3.31"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9fa08315bb612088cc391249efdc3bc77536f16c91f6cf495e6fbe85b20a4a81"
+dependencies = [
+ "futures-channel",
+ "futures-core",
+ "futures-io",
+ "futures-macro",
+ "futures-sink",
+ "futures-task",
+ "memchr",
+ "pin-project-lite",
+ "pin-utils",
+ "slab",
+]
+
+[[package]]
+name = "gcp_auth"
+version = "0.12.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "dbf67f30198e045a039264c01fb44659ce82402d7771c50938beb41a5ac87733"
+dependencies = [
+ "async-trait",
+ "base64",
+ "bytes",
+ "chrono",
+ "home",
+ "http",
+ "http-body-util",
+ "hyper",
+ "hyper-rustls",
+ "hyper-util",
+ "ring",
+ "rustls-pemfile",
+ "serde",
+ "serde_json",
+ "thiserror 1.0.69",
+ "tokio",
+ "tracing",
+ "tracing-futures",
+ "url",
+]
+
+[[package]]
+name = "getrandom"
+version = "0.2.16"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "335ff9f135e4384c8150d6f27c6daed433577f86b4750418338c01a1a2528592"
+dependencies = [
+ "cfg-if",
+ "js-sys",
+ "libc",
+ "wasi 0.11.0+wasi-snapshot-preview1",
+ "wasm-bindgen",
+]
+
 [[package]]
 name = "getrandom"
 version = "0.3.1"
@@ -232,11 +536,19 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "43a49c392881ce6d5c3b8cb70f98717b7c07aabbdff06687b9030dbfbe2725f8"
 dependencies = [
  "cfg-if",
+ "js-sys",
  "libc",
- "wasi",
+ "wasi 0.13.3+wasi-0.2.2",
+ "wasm-bindgen",
  "windows-targets",
 ]
 
+[[package]]
+name = "gimli"
+version = "0.31.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "07e28edb80900c19c28f1072f2e8aeca7fa06b23cd4169cefe1af5aa3260783f"
+
 [[package]]
 name = "git2"
 version = "0.20.0"
@@ -252,12 +564,190 @@ dependencies = [
  "url",
 ]
 
+[[package]]
+name = "google-generative-ai-rs"
+version = "0.3.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2b6b10fd78d16c7d359d7ccf6ae50dbf142f6ed8682cc0de0254735fcf9908fc"
+dependencies = [
+ "bytecount",
+ "env_logger",
+ "futures",
+ "gcp_auth",
+ "log",
+ "reqwest",
+ "reqwest-streams",
+ "serde",
+ "serde_json",
+ "tokio",
+]
+
+[[package]]
+name = "h2"
+version = "0.4.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a9421a676d1b147b16b82c9225157dc629087ef8ec4d5e2960f9437a90dac0a5"
+dependencies = [
+ "atomic-waker",
+ "bytes",
+ "fnv",
+ "futures-core",
+ "futures-sink",
+ "http",
+ "indexmap",
+ "slab",
+ "tokio",
+ "tokio-util",
+ "tracing",
+]
+
+[[package]]
+name = "hashbrown"
+version = "0.15.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "84b26c544d002229e640969970a2e74021aadf6e2f96372b9c58eff97de08eb3"
+
 [[package]]
 name = "heck"
 version = "0.5.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea"
 
+[[package]]
+name = "home"
+version = "0.5.11"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "589533453244b0995c858700322199b2becb13b627df2851f64a2775d024abcf"
+dependencies = [
+ "windows-sys 0.59.0",
+]
+
+[[package]]
+name = "http"
+version = "1.3.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f4a85d31aea989eead29a3aaf9e1115a180df8282431156e533de47660892565"
+dependencies = [
+ "bytes",
+ "fnv",
+ "itoa",
+]
+
+[[package]]
+name = "http-body"
+version = "1.0.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1efedce1fb8e6913f23e0c92de8e62cd5b772a67e7b3946df930a62566c93184"
+dependencies = [
+ "bytes",
+ "http",
+]
+
+[[package]]
+name = "http-body-util"
+version = "0.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b021d93e26becf5dc7e1b75b1bed1fd93124b374ceb73f43d4d4eafec896a64a"
+dependencies = [
+ "bytes",
+ "futures-core",
+ "http",
+ "http-body",
+ "pin-project-lite",
+]
+
+[[package]]
+name = "httparse"
+version = "1.10.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6dbf3de79e51f3d586ab4cb9d5c3e2c14aa28ed23d180cf89b4df0454a69cc87"
+
+[[package]]
+name = "hyper"
+version = "1.6.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "cc2b571658e38e0c01b1fdca3bbbe93c00d3d71693ff2770043f8c29bc7d6f80"
+dependencies = [
+ "bytes",
+ "futures-channel",
+ "futures-util",
+ "h2",
+ "http",
+ "http-body",
+ "httparse",
+ "itoa",
+ "pin-project-lite",
+ "smallvec",
+ "tokio",
+ "want",
+]
+
+[[package]]
+name = "hyper-rustls"
+version = "0.27.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "03a01595e11bdcec50946522c32dde3fc6914743000a68b93000965f2f02406d"
+dependencies = [
+ "http",
+ "hyper",
+ "hyper-util",
+ "rustls",
+ "rustls-native-certs",
+ "rustls-pki-types",
+ "tokio",
+ "tokio-rustls",
+ "tower-service",
+ "webpki-roots",
+]
+
+[[package]]
+name = "hyper-util"
+version = "0.1.13"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b1c293b6b3d21eca78250dc7dbebd6b9210ec5530e038cbfe0661b5c47ab06e8"
+dependencies = [
+ "base64",
+ "bytes",
+ "futures-channel",
+ "futures-core",
+ "futures-util",
+ "http",
+ "http-body",
+ "hyper",
+ "ipnet",
+ "libc",
+ "percent-encoding",
+ "pin-project-lite",
+ "socket2",
+ "tokio",
+ "tower-service",
+ "tracing",
+]
+
+[[package]]
+name = "iana-time-zone"
+version = "0.1.63"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
+dependencies = [
+ "android_system_properties",
+ "core-foundation-sys",
+ "iana-time-zone-haiku",
+ "js-sys",
+ "log",
+ "wasm-bindgen",
+ "windows-core",
+]
+
+[[package]]
+name = "iana-time-zone-haiku"
+version = "0.1.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
+dependencies = [
+ "cc",
+]
+
 [[package]]
 name = "icu_collections"
 version = "1.5.0"
@@ -397,6 +887,16 @@ dependencies = [
  "icu_properties",
 ]
 
+[[package]]
+name = "indexmap"
+version = "2.9.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "cea70ddb795996207ad57735b50c5982d8844f38ba9ee5f1aedcfb708a2aa11e"
+dependencies = [
+ "equivalent",
+ "hashbrown",
+]
+
 [[package]]
 name = "indicatif"
 version = "0.17.11"
@@ -411,23 +911,69 @@ dependencies = [
 ]
 
 [[package]]
-name = "is_terminal_polyfill"
-version = "1.70.1"
+name = "ipnet"
+version = "2.11.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7943c866cc5cd64cbc25b2e01621d07fa8eb2a1a23160ee81ce38704e97b8ecf"
+checksum = "469fb0b9cefa57e3ef31275ee7cacb78f2fdca44e4765491884a2b119d4eb130"
 
 [[package]]
-name = "jobserver"
-version = "0.1.32"
+name = "iri-string"
+version = "0.7.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "48d1dbcbbeb6a7fec7e059840aa538bd62aaccf972c7346c4d9d2059312853d0"
+checksum = "dbc5ebe9c3a1a7a5127f920a418f7585e9e758e911d0466ed004f393b0e380b2"
 dependencies = [
- "libc",
+ "memchr",
+ "serde",
 ]
 
 [[package]]
-name = "js-sys"
-version = "0.3.77"
+name = "is_terminal_polyfill"
+version = "1.70.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7943c866cc5cd64cbc25b2e01621d07fa8eb2a1a23160ee81ce38704e97b8ecf"
+
+[[package]]
+name = "itoa"
+version = "1.0.15"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"
+
+[[package]]
+name = "jiff"
+version = "0.2.14"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a194df1107f33c79f4f93d02c80798520551949d59dfad22b6157048a88cca93"
+dependencies = [
+ "jiff-static",
+ "log",
+ "portable-atomic",
+ "portable-atomic-util",
+ "serde",
+]
+
+[[package]]
+name = "jiff-static"
+version = "0.2.14"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6c6e1db7ed32c6c71b759497fae34bf7933636f75a251b9e736555da426f6442"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+]
+
+[[package]]
+name = "jobserver"
+version = "0.1.32"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "48d1dbcbbeb6a7fec7e059840aa538bd62aaccf972c7346c4d9d2059312853d0"
+dependencies = [
+ "libc",
+]
+
+[[package]]
+name = "js-sys"
+version = "0.3.77"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
 dependencies = [
@@ -437,9 +983,9 @@ dependencies = [
 
 [[package]]
 name = "libc"
-version = "0.2.170"
+version = "0.2.172"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "875b3680cb2f8f71bdcf9a30f38d48282f5d3c95cbf9b3fa57269bb5d5c06828"
+checksum = "d750af042f7ef4f724306de029d18836c26c1765a54a6a3f094cbd23a7267ffa"
 
 [[package]]
 name = "libgit2-sys"
@@ -493,18 +1039,84 @@ version = "0.7.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "23fb14cb19457329c82206317a5663005a4d404783dc74f4252769b0d5f42856"
 
+[[package]]
+name = "lock_api"
+version = "0.4.13"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "96936507f153605bddfcda068dd804796c84324ed2510809e5b2a624c81da765"
+dependencies = [
+ "autocfg",
+ "scopeguard",
+]
+
 [[package]]
 name = "log"
 version = "0.4.26"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "30bde2b3dc3671ae49d8e2e9f044c7c005836e7a023ee57cffa25ab82764bb9e"
 
+[[package]]
+name = "lru-slab"
+version = "0.1.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "112b39cec0b298b6c1999fee3e31427f74f676e4cb9879ed1a121b43661a4154"
+
+[[package]]
+name = "memchr"
+version = "2.7.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3"
+
+[[package]]
+name = "mime"
+version = "0.3.17"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6877bb514081ee2a7ff5ef9de3281f14a4dd4bceac4c09388074a6b5df8a139a"
+
+[[package]]
+name = "miniz_oxide"
+version = "0.8.8"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3be647b768db090acb35d5ec5db2b0e1f1de11133ca123b9eacf5137868f892a"
+dependencies = [
+ "adler2",
+]
+
+[[package]]
+name = "mio"
+version = "1.0.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "78bed444cc8a2160f01cbcf811ef18cac863ad68ae8ca62092e8db51d51c761c"
+dependencies = [
+ "libc",
+ "wasi 0.11.0+wasi-snapshot-preview1",
+ "windows-sys 0.59.0",
+]
+
+[[package]]
+name = "num-traits"
+version = "0.2.19"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
+dependencies = [
+ "autocfg",
+]
+
 [[package]]
 name = "number_prefix"
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "830b246a0e5f20af87141b25c173cd1b609bd7779a4617d6ec582abaf90870f3"
 
+[[package]]
+name = "object"
+version = "0.36.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "62948e14d923ea95ea2c7c86c71013138b66525b86bdc08d2dcc262bdb497b87"
+dependencies = [
+ "memchr",
+]
+
 [[package]]
 name = "once_cell"
 version = "1.20.3"
@@ -529,12 +1141,67 @@ dependencies = [
  "vcpkg",
 ]
 
+[[package]]
+name = "parking_lot"
+version = "0.12.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "70d58bf43669b5795d1576d0641cfb6fbb2057bf629506267a92807158584a13"
+dependencies = [
+ "lock_api",
+ "parking_lot_core",
+]
+
+[[package]]
+name = "parking_lot_core"
+version = "0.9.11"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bc838d2a56b5b1a6c25f55575dfc605fabb63bb2365f6c2353ef9159aa69e4a5"
+dependencies = [
+ "cfg-if",
+ "libc",
+ "redox_syscall",
+ "smallvec",
+ "windows-targets",
+]
+
 [[package]]
 name = "percent-encoding"
 version = "2.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e"
 
+[[package]]
+name = "pin-project"
+version = "1.1.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "677f1add503faace112b9f1373e43e9e054bfdd22ff1a63c1bc485eaec6a6a8a"
+dependencies = [
+ "pin-project-internal",
+]
+
+[[package]]
+name = "pin-project-internal"
+version = "1.1.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6e918e4ff8c4549eb882f14b3a4bc8c8bc93de829416eacf579f1207a8fbf861"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+]
+
+[[package]]
+name = "pin-project-lite"
+version = "0.2.16"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"
+
+[[package]]
+name = "pin-utils"
+version = "0.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184"
+
 [[package]]
 name = "pkg-config"
 version = "0.3.31"
@@ -547,6 +1214,24 @@ version = "1.11.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "350e9b48cbc6b0e028b0473b114454c6316e57336ee184ceab6e53f72c178b3e"
 
+[[package]]
+name = "portable-atomic-util"
+version = "0.2.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d8a2f0d8d040d7848a709caf78912debcc3f33ee4b3cac47d73d1e1069e83507"
+dependencies = [
+ "portable-atomic",
+]
+
+[[package]]
+name = "ppv-lite86"
+version = "0.2.21"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "85eae3c4ed2f50dcfe72643da4befc30deadb458a9b590d720cde2f2b1e97da9"
+dependencies = [
+ "zerocopy",
+]
+
 [[package]]
 name = "proc-macro2"
 version = "1.0.93"
@@ -556,6 +1241,61 @@ dependencies = [
  "unicode-ident",
 ]
 
+[[package]]
+name = "quinn"
+version = "0.11.8"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "626214629cda6781b6dc1d316ba307189c85ba657213ce642d9c77670f8202c8"
+dependencies = [
+ "bytes",
+ "cfg_aliases",
+ "pin-project-lite",
+ "quinn-proto",
+ "quinn-udp",
+ "rustc-hash",
+ "rustls",
+ "socket2",
+ "thiserror 2.0.12",
+ "tokio",
+ "tracing",
+ "web-time",
+]
+
+[[package]]
+name = "quinn-proto"
+version = "0.11.12"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "49df843a9161c85bb8aae55f101bc0bac8bcafd637a620d9122fd7e0b2f7422e"
+dependencies = [
+ "bytes",
+ "getrandom 0.3.1",
+ "lru-slab",
+ "rand",
+ "ring",
+ "rustc-hash",
+ "rustls",
+ "rustls-pki-types",
+ "slab",
+ "thiserror 2.0.12",
+ "tinyvec",
+ "tracing",
+ "web-time",
+]
+
+[[package]]
+name = "quinn-udp"
+version = "0.5.12"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ee4e529991f949c5e25755532370b8af5d114acae52326361d68d47af64aa842"
+dependencies = [
+ "cfg_aliases",
+ "libc",
+ "once_cell",
+ "socket2",
+ "tracing",
+ "windows-sys 0.59.0",
+]
+
 [[package]]
 name = "quote"
 version = "1.0.38"
@@ -565,6 +1305,160 @@ dependencies = [
  "proc-macro2",
 ]
 
+[[package]]
+name = "rand"
+version = "0.9.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9fbfd9d094a40bf3ae768db9361049ace4c0e04a4fd6b359518bd7b73a73dd97"
+dependencies = [
+ "rand_chacha",
+ "rand_core",
+]
+
+[[package]]
+name = "rand_chacha"
+version = "0.9.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d3022b5f1df60f26e1ffddd6c66e8aa15de382ae63b3a0c1bfc0e4d3e3f325cb"
+dependencies = [
+ "ppv-lite86",
+ "rand_core",
+]
+
+[[package]]
+name = "rand_core"
+version = "0.9.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "99d9a13982dcf210057a8a78572b2217b667c3beacbf3a0d8b454f6f82837d38"
+dependencies = [
+ "getrandom 0.3.1",
+]
+
+[[package]]
+name = "redox_syscall"
+version = "0.5.12"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "928fca9cf2aa042393a8325b9ead81d2f0df4cb12e1e24cef072922ccd99c5af"
+dependencies = [
+ "bitflags",
+]
+
+[[package]]
+name = "regex"
+version = "1.11.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b544ef1b4eac5dc2db33ea63606ae9ffcfac26c1416a2806ae0bf5f56b201191"
+dependencies = [
+ "aho-corasick",
+ "memchr",
+ "regex-automata",
+ "regex-syntax",
+]
+
+[[package]]
+name = "regex-automata"
+version = "0.4.9"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "809e8dc61f6de73b46c85f4c96486310fe304c434cfa43669d7b40f711150908"
+dependencies = [
+ "aho-corasick",
+ "memchr",
+ "regex-syntax",
+]
+
+[[package]]
+name = "regex-syntax"
+version = "0.8.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c"
+
+[[package]]
+name = "reqwest"
+version = "0.12.18"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e98ff6b0dbbe4d5a37318f433d4fc82babd21631f194d370409ceb2e40b2f0b5"
+dependencies = [
+ "base64",
+ "bytes",
+ "futures-core",
+ "futures-util",
+ "http",
+ "http-body",
+ "http-body-util",
+ "hyper",
+ "hyper-rustls",
+ "hyper-util",
+ "ipnet",
+ "js-sys",
+ "log",
+ "mime",
+ "once_cell",
+ "percent-encoding",
+ "pin-project-lite",
+ "quinn",
+ "rustls",
+ "rustls-pki-types",
+ "serde",
+ "serde_json",
+ "serde_urlencoded",
+ "sync_wrapper",
+ "tokio",
+ "tokio-rustls",
+ "tokio-util",
+ "tower",
+ "tower-http",
+ "tower-service",
+ "url",
+ "wasm-bindgen",
+ "wasm-bindgen-futures",
+ "wasm-streams",
+ "web-sys",
+ "webpki-roots",
+]
+
+[[package]]
+name = "reqwest-streams"
+version = "0.8.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "81767919155ab37a11b77175f3fc130dc2c44ea54b28d1ea5a5b05d53654059d"
+dependencies = [
+ "async-trait",
+ "bytes",
+ "cargo-husky",
+ "futures",
+ "reqwest",
+ "serde",
+ "serde_json",
+ "tokio",
+ "tokio-util",
+]
+
+[[package]]
+name = "ring"
+version = "0.17.14"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a4689e6c2294d81e88dc6261c768b63bc4fcdb852be6d1352498b114f61383b7"
+dependencies = [
+ "cc",
+ "cfg-if",
+ "getrandom 0.2.16",
+ "libc",
+ "untrusted",
+ "windows-sys 0.52.0",
+]
+
+[[package]]
+name = "rustc-demangle"
+version = "0.1.24"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "719b953e2095829ee67db738b3bfa9fa368c94900df327b3f07fe6e794d2fe1f"
+
+[[package]]
+name = "rustc-hash"
+version = "2.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "357703d41365b4b27c590e3ed91eabb1b663f07c4c084095e60cbed4362dff0d"
+
 [[package]]
 name = "rustix"
 version = "0.38.44"
@@ -575,7 +1469,113 @@ dependencies = [
  "errno",
  "libc",
  "linux-raw-sys",
- "windows-sys",
+ "windows-sys 0.59.0",
+]
+
+[[package]]
+name = "rustls"
+version = "0.23.27"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "730944ca083c1c233a75c09f199e973ca499344a2b7ba9e755c457e86fb4a321"
+dependencies = [
+ "once_cell",
+ "ring",
+ "rustls-pki-types",
+ "rustls-webpki",
+ "subtle",
+ "zeroize",
+]
+
+[[package]]
+name = "rustls-native-certs"
+version = "0.8.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7fcff2dd52b58a8d98a70243663a0d234c4e2b79235637849d15913394a247d3"
+dependencies = [
+ "openssl-probe",
+ "rustls-pki-types",
+ "schannel",
+ "security-framework",
+]
+
+[[package]]
+name = "rustls-pemfile"
+version = "2.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "dce314e5fee3f39953d46bb63bb8a46d40c2f8fb7cc5a3b6cab2bde9721d6e50"
+dependencies = [
+ "rustls-pki-types",
+]
+
+[[package]]
+name = "rustls-pki-types"
+version = "1.12.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "229a4a4c221013e7e1f1a043678c5cc39fe5171437c88fb47151a21e6f5b5c79"
+dependencies = [
+ "web-time",
+ "zeroize",
+]
+
+[[package]]
+name = "rustls-webpki"
+version = "0.103.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e4a72fe2bcf7a6ac6fd7d0b9e5cb68aeb7d4c0a0271730218b3e92d43b4eb435"
+dependencies = [
+ "ring",
+ "rustls-pki-types",
+ "untrusted",
+]
+
+[[package]]
+name = "rustversion"
+version = "1.0.21"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8a0d197bd2c9dc6e53b84da9556a69ba4cdfab8619eb41a8bd1cc2027a0f6b1d"
+
+[[package]]
+name = "ryu"
+version = "1.0.20"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"
+
+[[package]]
+name = "schannel"
+version = "0.1.27"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1f29ebaa345f945cec9fbbc532eb307f0fdad8161f281b6369539c8d84876b3d"
+dependencies = [
+ "windows-sys 0.59.0",
+]
+
+[[package]]
+name = "scopeguard"
+version = "1.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49"
+
+[[package]]
+name = "security-framework"
+version = "3.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "271720403f46ca04f7ba6f55d438f8bd878d6b8ca0a1046e8228c4145bcbb316"
+dependencies = [
+ "bitflags",
+ "core-foundation",
+ "core-foundation-sys",
+ "libc",
+ "security-framework-sys",
+]
+
+[[package]]
+name = "security-framework-sys"
+version = "2.14.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "49db231d56a190491cb4aeda9527f1ad45345af50b0851622a7adb8c03b01c32"
+dependencies = [
+ "core-foundation-sys",
+ "libc",
 ]
 
 [[package]]
@@ -598,6 +1598,30 @@ dependencies = [
  "syn",
 ]
 
+[[package]]
+name = "serde_json"
+version = "1.0.140"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "20068b6e96dc6c9bd23e01df8827e6c7e1f2fddd43c21810382803c136b99373"
+dependencies = [
+ "itoa",
+ "memchr",
+ "ryu",
+ "serde",
+]
+
+[[package]]
+name = "serde_urlencoded"
+version = "0.7.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d3491c14715ca2294c4d6a88f15e84739788c1d030eed8c110436aafdaa2f3fd"
+dependencies = [
+ "form_urlencoded",
+ "itoa",
+ "ryu",
+ "serde",
+]
+
 [[package]]
 name = "shell-words"
 version = "1.1.0"
@@ -610,12 +1634,40 @@ version = "1.3.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"
 
+[[package]]
+name = "signal-hook-registry"
+version = "1.4.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9203b8055f63a2a00e2f593bb0510367fe707d7ff1e5c872de2f537b339e5410"
+dependencies = [
+ "libc",
+]
+
+[[package]]
+name = "slab"
+version = "0.4.9"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67"
+dependencies = [
+ "autocfg",
+]
+
 [[package]]
 name = "smallvec"
 version = "1.14.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "7fcf8323ef1faaee30a44a340193b1ac6814fd9b7b4e88e9d4519a3e4abe1cfd"
 
+[[package]]
+name = "socket2"
+version = "0.5.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e22376abed350d73dd1cd119b57ffccad95b4e585a7cda43e286245ce23c0678"
+dependencies = [
+ "libc",
+ "windows-sys 0.52.0",
+]
+
 [[package]]
 name = "stable_deref_trait"
 version = "1.2.0"
@@ -628,6 +1680,12 @@ version = "0.11.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "7da8b5736845d9f2fcb837ea5d9e2628564b3b043a70948a3f0b778838c5fb4f"
 
+[[package]]
+name = "subtle"
+version = "2.6.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "13c2bddecc57b384dee18652358fb23172facb8a2c51ccc10d74c157bdea3292"
+
 [[package]]
 name = "syn"
 version = "2.0.98"
@@ -639,6 +1697,15 @@ dependencies = [
  "unicode-ident",
 ]
 
+[[package]]
+name = "sync_wrapper"
+version = "1.0.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0bf256ce5efdfa370213c1dabab5935a12e49f2c58d15e9eac2870d3b4f27263"
+dependencies = [
+ "futures-core",
+]
+
 [[package]]
 name = "synstructure"
 version = "0.13.1"
@@ -658,10 +1725,10 @@ checksum = "22e5a0acb1f3f55f65cc4a866c361b2fb2a0ff6366785ae6fbb5f85df07ba230"
 dependencies = [
  "cfg-if",
  "fastrand",
- "getrandom",
+ "getrandom 0.3.1",
  "once_cell",
  "rustix",
- "windows-sys",
+ "windows-sys 0.59.0",
 ]
 
 [[package]]
@@ -670,7 +1737,16 @@ version = "1.0.69"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "b6aaf5339b578ea85b50e080feb250a3e8ae8cfcdff9a461c9ec2904bc923f52"
 dependencies = [
- "thiserror-impl",
+ "thiserror-impl 1.0.69",
+]
+
+[[package]]
+name = "thiserror"
+version = "2.0.12"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "567b8a2dae586314f7be2a752ec7474332959c6460e02bde30d702a66d488708"
+dependencies = [
+ "thiserror-impl 2.0.12",
 ]
 
 [[package]]
@@ -684,6 +1760,17 @@ dependencies = [
  "syn",
 ]
 
+[[package]]
+name = "thiserror-impl"
+version = "2.0.12"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7f7cf42b4507d8ea322120659672cf1b9dbb93f8f2d4ecfd6e51350ff5b17a1d"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+]
+
 [[package]]
 name = "tinystr"
 version = "0.7.6"
@@ -694,6 +1781,165 @@ dependencies = [
  "zerovec",
 ]
 
+[[package]]
+name = "tinyvec"
+version = "1.9.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09b3661f17e86524eccd4371ab0429194e0d7c008abb45f7a7495b1719463c71"
+dependencies = [
+ "tinyvec_macros",
+]
+
+[[package]]
+name = "tinyvec_macros"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20"
+
+[[package]]
+name = "tokio"
+version = "1.45.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "75ef51a33ef1da925cea3e4eb122833cb377c61439ca401b770f54902b806779"
+dependencies = [
+ "backtrace",
+ "bytes",
+ "libc",
+ "mio",
+ "parking_lot",
+ "pin-project-lite",
+ "signal-hook-registry",
+ "socket2",
+ "tokio-macros",
+ "windows-sys 0.52.0",
+]
+
+[[package]]
+name = "tokio-macros"
+version = "2.5.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6e06d43f1345a3bcd39f6a56dbb7dcab2ba47e68e8ac134855e7e2bdbaf8cab8"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+]
+
+[[package]]
+name = "tokio-rustls"
+version = "0.26.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e727b36a1a0e8b74c376ac2211e40c2c8af09fb4013c60d910495810f008e9b"
+dependencies = [
+ "rustls",
+ "tokio",
+]
+
+[[package]]
+name = "tokio-util"
+version = "0.7.15"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "66a539a9ad6d5d281510d5bd368c973d636c02dbf8a67300bfb6b950696ad7df"
+dependencies = [
+ "bytes",
+ "futures-core",
+ "futures-sink",
+ "pin-project-lite",
+ "tokio",
+]
+
+[[package]]
+name = "tower"
+version = "0.5.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d039ad9159c98b70ecfd540b2573b97f7f52c3e8d9f8ad57a24b916a536975f9"
+dependencies = [
+ "futures-core",
+ "futures-util",
+ "pin-project-lite",
+ "sync_wrapper",
+ "tokio",
+ "tower-layer",
+ "tower-service",
+]
+
+[[package]]
+name = "tower-http"
+version = "0.6.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0fdb0c213ca27a9f57ab69ddb290fd80d970922355b83ae380b395d3986b8a2e"
+dependencies = [
+ "bitflags",
+ "bytes",
+ "futures-util",
+ "http",
+ "http-body",
+ "iri-string",
+ "pin-project-lite",
+ "tower",
+ "tower-layer",
+ "tower-service",
+]
+
+[[package]]
+name = "tower-layer"
+version = "0.3.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "121c2a6cda46980bb0fcd1647ffaf6cd3fc79a013de288782836f6df9c48780e"
+
+[[package]]
+name = "tower-service"
+version = "0.3.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8df9b6e13f2d32c91b9bd719c00d1958837bc7dec474d94952798cc8e69eeec3"
+
+[[package]]
+name = "tracing"
+version = "0.1.41"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
+dependencies = [
+ "pin-project-lite",
+ "tracing-attributes",
+ "tracing-core",
+]
+
+[[package]]
+name = "tracing-attributes"
+version = "0.1.28"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "395ae124c09f9e6918a2310af6038fba074bcf474ac352496d5910dd59a2226d"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+]
+
+[[package]]
+name = "tracing-core"
+version = "0.1.33"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e672c95779cf947c5311f83787af4fa8fffd12fb27e4993211a84bdfd9610f9c"
+dependencies = [
+ "once_cell",
+]
+
+[[package]]
+name = "tracing-futures"
+version = "0.2.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "97d095ae15e245a057c8e8451bab9b3ee1e1f68e9ba2b4fbc18d0ac5237835f2"
+dependencies = [
+ "pin-project",
+ "tracing",
+]
+
+[[package]]
+name = "try-lock"
+version = "0.2.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e421abadd41a4225275504ea4d6566923418b7f05506fbc9c0fe86ba7396114b"
+
 [[package]]
 name = "unicode-ident"
 version = "1.0.17"
@@ -706,6 +1952,12 @@ version = "0.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "1fc81956842c57dac11422a97c3b8195a1ff727f06e85c84ed2e8aa277c9a0fd"
 
+[[package]]
+name = "untrusted"
+version = "0.9.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8ecb6da28b8a351d773b68d5825ac39017e680750f980f3a1a85cd8dd28a47c1"
+
 [[package]]
 name = "url"
 version = "2.5.4"
@@ -741,6 +1993,21 @@ version = "0.2.15"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426"
 
+[[package]]
+name = "want"
+version = "0.3.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bfa7760aed19e106de2c7c0b581b509f2f25d3dacaf737cb82ac61bc6d760b0e"
+dependencies = [
+ "try-lock",
+]
+
+[[package]]
+name = "wasi"
+version = "0.11.0+wasi-snapshot-preview1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423"
+
 [[package]]
 name = "wasi"
 version = "0.13.3+wasi-0.2.2"
@@ -758,6 +2025,7 @@ checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
 dependencies = [
  "cfg-if",
  "once_cell",
+ "rustversion",
  "wasm-bindgen-macro",
 ]
 
@@ -775,6 +2043,19 @@ dependencies = [
  "wasm-bindgen-shared",
 ]
 
+[[package]]
+name = "wasm-bindgen-futures"
+version = "0.4.50"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "555d470ec0bc3bb57890405e5d4322cc9ea83cebb085523ced7be4144dac1e61"
+dependencies = [
+ "cfg-if",
+ "js-sys",
+ "once_cell",
+ "wasm-bindgen",
+ "web-sys",
+]
+
 [[package]]
 name = "wasm-bindgen-macro"
 version = "0.2.100"
@@ -807,6 +2088,29 @@ dependencies = [
  "unicode-ident",
 ]
 
+[[package]]
+name = "wasm-streams"
+version = "0.4.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "15053d8d85c7eccdbefef60f06769760a563c7f0a9d6902a13d35c7800b0ad65"
+dependencies = [
+ "futures-util",
+ "js-sys",
+ "wasm-bindgen",
+ "wasm-bindgen-futures",
+ "web-sys",
+]
+
+[[package]]
+name = "web-sys"
+version = "0.3.77"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "33b6dd2ef9186f1f2072e409e99cd22a975331a6b3591b12c764e0e55c60d5d2"
+dependencies = [
+ "js-sys",
+ "wasm-bindgen",
+]
+
 [[package]]
 name = "web-time"
 version = "1.1.0"
@@ -817,6 +2121,83 @@ dependencies = [
  "wasm-bindgen",
 ]
 
+[[package]]
+name = "webpki-roots"
+version = "1.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2853738d1cc4f2da3a225c18ec6c3721abb31961096e9dbf5ab35fa88b19cfdb"
+dependencies = [
+ "rustls-pki-types",
+]
+
+[[package]]
+name = "windows-core"
+version = "0.61.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
+dependencies = [
+ "windows-implement",
+ "windows-interface",
+ "windows-link",
+ "windows-result",
+ "windows-strings",
+]
+
+[[package]]
+name = "windows-implement"
+version = "0.60.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+]
+
+[[package]]
+name = "windows-interface"
+version = "0.59.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+]
+
+[[package]]
+name = "windows-link"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "76840935b766e1b0a05c0066835fb9ec80071d4c09a16f6bd5f7e655e3c14c38"
+
+[[package]]
+name = "windows-result"
+version = "0.3.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
+dependencies = [
+ "windows-link",
+]
+
+[[package]]
+name = "windows-strings"
+version = "0.4.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
+dependencies = [
+ "windows-link",
+]
+
+[[package]]
+name = "windows-sys"
+version = "0.52.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d"
+dependencies = [
+ "windows-targets",
+]
+
 [[package]]
 name = "windows-sys"
 version = "0.59.0"
@@ -935,6 +2316,26 @@ dependencies = [
  "synstructure",
 ]
 
+[[package]]
+name = "zerocopy"
+version = "0.8.25"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a1702d9583232ddb9174e01bb7c15a2ab8fb1bc6f227aa1233858c351a3ba0cb"
+dependencies = [
+ "zerocopy-derive",
+]
+
+[[package]]
+name = "zerocopy-derive"
+version = "0.8.25"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "28a6e20d751156648aa063f3800b706ee209a32c0b4d9f24be3d980b01be55ef"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+]
+
 [[package]]
 name = "zerofrom"
 version = "0.1.6"
diff --git a/Cargo.toml b/Cargo.toml
index d6ef85b..f2777a0 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -17,6 +17,8 @@ colored = "3.0.0"
 dialoguer = "0.11.0"
 git2 = "0.20.0"
 indicatif = "0.17.11"
+google-generative-ai-rs = { version = "0.3.4", features = ["beta"] }
+tokio = { version = "*", features = ["full"] }
 
 [profile.dev]
 opt-level = 0
diff --git a/src/events.rs b/src/events.rs
index 1a37944..71b8e59 100644
--- a/src/events.rs
+++ b/src/events.rs
@@ -13,7 +13,7 @@ pub mod git_branch;
 mod git_checkout;
 mod git_clean;
 pub mod git_clone;
-mod git_commit;
+pub mod git_commit;
 mod git_filter_repo;
 pub mod git_init;
 pub mod git_pull;
@@ -22,6 +22,7 @@ pub mod git_restore;
 pub mod git_stash;
 pub mod git_status;
 pub mod git_log;
+pub mod git_diff;
 
 const PENGUIN_EMOJI: &str = "🐧";
 
diff --git a/src/events/generate_commit_msg.rs b/src/events/generate_commit_msg.rs
new file mode 100644
index 0000000..e69de29
diff --git a/src/events/git_commit.rs b/src/events/git_commit.rs
index 8b13789..13b3d12 100644
--- a/src/events/git_commit.rs
+++ b/src/events/git_commit.rs
@@ -1 +1,203 @@
+use super::AtomicEvent;
+use crate::{
+    bgit_error::{BGitError, BGitErrorWorkflowType, NO_EVENT, NO_RULE},
+    rules::Rule,
+};
+use git2::{Repository, Signature};
+use std::path::Path;
 
+pub(crate) struct GitCommit {
+    name: String,
+    commit_message: String,
+    pre_check_rules: Vec<Box<dyn Rule + Send + Sync>>,
+}
+
+impl AtomicEvent for GitCommit {
+    fn new() -> Self
+    where
+        Self: Sized,
+    {
+        GitCommit {
+            name: "git_commit".to_owned(),
+            commit_message: String::new(),
+            pre_check_rules: vec![],
+        }
+    }
+
+    fn get_name(&self) -> &str {
+        &self.name
+    }
+
+    fn get_action_description(&self) -> &str {
+        "Commit staged files with auto-generated message"
+    }
+
+    fn add_pre_check_rule(&mut self, rule: Box<dyn Rule + Send + Sync>) {
+        self.pre_check_rules.push(rule);
+    }
+
+    fn get_pre_check_rule(&self) -> &Vec<Box<dyn Rule + Send + Sync>> {
+        &self.pre_check_rules
+    }
+
+    fn raw_execute(&self) -> Result<bool, Box<BGitError>> {
+        // Check if there are any staged files
+        if !self.has_staged_files()? {
+            println!("No staged files found. Nothing to commit.");
+            return Ok(false);
+        }
+
+        // Perform the commit with the provided message
+        self.commit_changes(&self.commit_message)?;
+
+        println!(
+            "Successfully committed with message: \"{}\"",
+            self.commit_message
+        );
+        Ok(true)
+    }
+}
+
+impl GitCommit {
+    /// Create a new GitCommit with a specific commit message
+    pub fn with_message(commit_message: String) -> Self {
+        GitCommit {
+            name: "git_commit".to_owned(),
+            commit_message,
+            pre_check_rules: vec![],
+        }
+    }
+
+    /// Check if there are any staged files ready to commit
+    fn has_staged_files(&self) -> Result<bool, Box<BGitError>> {
+        let repo = Repository::discover(Path::new(".")).map_err(|e| {
+            Box::new(BGitError::new(
+                "BGitError",
+                &format!("Failed to open repository: {}", e),
+                BGitErrorWorkflowType::AtomicEvent,
+                NO_EVENT,
+                &self.name,
+                NO_RULE,
+            ))
+        })?;
+
+        let index = repo.index().map_err(|e| {
+            Box::new(BGitError::new(
+                "BGitError",
+                &format!("Failed to get repository index: {}", e),
+                BGitErrorWorkflowType::AtomicEvent,
+                NO_EVENT,
+                &self.name,
+                NO_RULE,
+            ))
+        })?;
+
+        // Check if index has any entries (staged files)
+        Ok(index.len() > 0)
+    }
+
+    /// Commit the staged changes with the provided message
+    fn commit_changes(&self, message: &str) -> Result<(), Box<BGitError>> {
+        let repo = Repository::discover(Path::new(".")).map_err(|e| {
+            Box::new(BGitError::new(
+                "BGitError",
+                &format!("Failed to open repository: {}", e),
+                BGitErrorWorkflowType::AtomicEvent,
+                NO_EVENT,
+                &self.name,
+                NO_RULE,
+            ))
+        })?;
+
+        // Get the current signature (author/committer)
+        let signature = repo.signature().map_err(|e| {
+            Box::new(BGitError::new(
+                "BGitError",
+                &format!("Failed to get signature: {}", e),
+                BGitErrorWorkflowType::AtomicEvent,
+                NO_EVENT,
+                &self.name,
+                NO_RULE,
+            ))
+        })?;
+
+        // Get the current HEAD commit
+        let head = repo.head().map_err(|e| {
+            Box::new(BGitError::new(
+                "BGitError",
+                &format!("Failed to get HEAD reference: {}", e),
+                BGitErrorWorkflowType::AtomicEvent,
+                NO_EVENT,
+                &self.name,
+                NO_RULE,
+            ))
+        })?;
+
+        let parent_commit = head.peel_to_commit().map_err(|e| {
+            Box::new(BGitError::new(
+                "BGitError",
+                &format!("Failed to get HEAD commit: {}", e),
+                BGitErrorWorkflowType::AtomicEvent,
+                NO_EVENT,
+                &self.name,
+                NO_RULE,
+            ))
+        })?;
+
+        // Get the repository index and create a tree from it
+        let mut index = repo.index().map_err(|e| {
+            Box::new(BGitError::new(
+                "BGitError",
+                &format!("Failed to get repository index: {}", e),
+                BGitErrorWorkflowType::AtomicEvent,
+                NO_EVENT,
+                &self.name,
+                NO_RULE,
+            ))
+        })?;
+
+        let tree_id = index.write_tree().map_err(|e| {
+            Box::new(BGitError::new(
+                "BGitError",
+                &format!("Failed to write tree: {}", e),
+                BGitErrorWorkflowType::AtomicEvent,
+                NO_EVENT,
+                &self.name,
+                NO_RULE,
+            ))
+        })?;
+
+        let tree = repo.find_tree(tree_id).map_err(|e| {
+            Box::new(BGitError::new(
+                "BGitError",
+                &format!("Failed to find tree: {}", e),
+                BGitErrorWorkflowType::AtomicEvent,
+                NO_EVENT,
+                &self.name,
+                NO_RULE,
+            ))
+        })?;
+
+        // Create the commit
+        repo.commit(
+            Some("HEAD"),      // Update HEAD
+            &signature,        // Author
+            &signature,        // Committer
+            message,           // Commit message
+            &tree,             // Tree
+            &[&parent_commit], // Parents
+        )
+        .map_err(|e| {
+            Box::new(BGitError::new(
+                "BGitError",
+                &format!("Failed to create commit: {}", e),
+                BGitErrorWorkflowType::AtomicEvent,
+                NO_EVENT,
+                &self.name,
+                NO_RULE,
+            ))
+        })?;
+
+        Ok(())
+    }
+}
diff --git a/src/events/git_diff.rs b/src/events/git_diff.rs
new file mode 100644
index 0000000..6eb4956
--- /dev/null
+++ b/src/events/git_diff.rs
@@ -0,0 +1,118 @@
+// use super::AtomicEvent;
+// use crate::{
+//     bgit_error::{BGitError, BGitErrorWorkflowType, NO_EVENT, NO_RULE},
+//     rules::Rule,
+// };
+// use git2::{Repository, Diff, DiffOptions};
+// use std::path::Path;
+
+// pub(crate) struct GitDiff {
+//     name: String,
+//     pre_check_rules: Vec<Box<dyn Rule + Send + Sync>>,
+// }
+
+// impl AtomicEvent for GitDiff {
+//     fn new() -> Self
+//     where
+//         Self: Sized,
+//     {
+//         GitDiff {
+//             name: "git_diff".to_owned(),
+//             pre_check_rules: vec![],
+//         }
+//     }
+
+//     fn get_name(&self) -> &str {
+//         &self.name
+//     }
+
+//     fn get_action_description(&self) -> &str {
+//         "Show differences between working directory and staging area"
+//     }
+
+//     fn add_pre_check_rule(&mut self, rule: Box<dyn Rule + Send + Sync>) {
+//         self.pre_check_rules.push(rule);
+//     }
+
+//     fn get_pre_check_rule(&self) -> &Vec<Box<dyn Rule + Send + Sync>> {
+//         &self.pre_check_rules
+//     }
+
+//     fn raw_execute(&self) -> Result<bool, Box<BGitError>> {
+//         self.diff_working_directory()
+//     }
+// }
+
+// impl GitDiff {
+//     /// Show diff between working directory and staging area (git diff)
+//     fn diff_working_directory(&self) -> Result<bool, Box<BGitError>> {
+//         let repo = Repository::discover(Path::new(".")).map_err(|e| {
+//             Box::new(BGitError::new(
+//                 "BGitError",
+//                 &format!("Failed to open repository: {}", e),
+//                 BGitErrorWorkflowType::AtomicEvent,
+//                 NO_EVENT,
+//                 &self.name,
+//                 NO_RULE,
+//             ))
+//         })?;
+
+//         let mut diff_opts = DiffOptions::new();
+//         diff_opts.include_untracked(false);
+
+//         let diff = repo.diff_index_to_workdir(None, Some(&mut diff_opts))
+//             .map_err(|e| {
+//                 Box::new(BGitError::new(
+//                     "BGitError",
+//                     &format!("Failed to create diff: {}", e),
+//                     BGitErrorWorkflowType::AtomicEvent,
+//                     NO_EVENT,
+//                     &self.name,
+//                     NO_RULE,
+//                 ))
+//             })?;
+
+//         self.print_diff(&diff)?;
+//         Ok(true)
+//     }
+
+//     /// Print the diff output
+//     fn print_diff(&self, diff: &Diff) -> Result<(), Box<BGitError>> {
+//         let stats = diff.stats().map_err(|e| {
+//             Box::new(BGitError::new(
+//                 "BGitError",
+//                 &format!("Failed to get diff stats: {}", e),
+//                 BGitErrorWorkflowType::AtomicEvent,
+//                 NO_EVENT,
+//                 &self.name,
+//                 NO_RULE,
+//             ))
+//         })?;
+
+//         // Print the actual diff
+//         diff.print(git2::DiffFormat::Patch, |_delta, _hunk, line| {
+//             match line.origin() {
+//                 '+' => print!("\x1b[32m+{}\x1b[0m", std::str::from_utf8(line.content()).unwrap_or("")),
+//                 '-' => print!("\x1b[31m-{}\x1b[0m", std::str::from_utf8(line.content()).unwrap_or("")),
+//                 ' ' => print!(" {}", std::str::from_utf8(line.content()).unwrap_or("")),
+//                 _ => print!("{}", std::str::from_utf8(line.content()).unwrap_or("")),
+//             }
+//             true
+//         }).map_err(|e| {
+//             Box::new(BGitError::new(
+//                 "BGitError",
+//                 &format!("Failed to print diff: {}", e),
+//                 BGitErrorWorkflowType::AtomicEvent,
+//                 NO_EVENT,
+//                 &self.name,
+//                 NO_RULE,
+//             ))
+//         })?;
+
+//         if stats.files_changed() == 0 {
+//             println!("No differences found.");
+//         }
+
+//         Ok(())
+//     }
+// }
\ No newline at end of file
diff --git a/src/workflows/default/action/mod.rs b/src/workflows/default/action/mod.rs
index 3b615eb..c504d55 100644
--- a/src/workflows/default/action/mod.rs
+++ b/src/workflows/default/action/mod.rs
@@ -9,4 +9,5 @@ pub(crate) mod ta08_is_pulled_pushed;
 pub(crate) mod ta09_pull_push;
 pub(crate) mod ta10_is_branch_main;
 pub(crate) mod ta11_is_sole_contributor;
-pub(crate) mod ta12_move_changes;
\ No newline at end of file
+pub(crate) mod ta12_move_changes;
+pub(crate) mod ta13_ai_commit_msg;
\ No newline at end of file
diff --git a/src/workflows/default/action/ta13_ai_commit_msg.rs b/src/workflows/default/action/ta13_ai_commit_msg.rs
new file mode 100644
index 0000000..ebae487
--- /dev/null
+++ b/src/workflows/default/action/ta13_ai_commit_msg.rs
@@ -0,0 +1,275 @@
+use crate::events::git_commit::GitCommit;
+use crate::step::Task::ActionStepTask;
+use crate::workflows::default::action::ta08_is_pulled_pushed::IsPushedPulled;
+use crate::{
+    bgit_error::BGitError,
+    step::{ActionStep, Step},
+};
+use git2::{DiffOptions, Repository};
+use google_generative_ai_rs::v1::{
+    api::{Client, PostResult},
+    gemini::{
+        request::{Request, SystemInstructionContent, SystemInstructionPart},
+        Content, Model, Part, Role,
+    },
+};
+use std::path::Path;
+
+use crate::events::AtomicEvent;
+
+pub(crate) struct AICommit {
+    name: String,
+    api_key: Option<String>,
+}
+
+impl ActionStep for AICommit {
+    fn new() -> Self
+    where
+        Self: Sized,
+    {
+        AICommit {
+            name: "ai_commit".to_owned(),
+            api_key: None,
+        }
+    }
+
+    fn get_name(&self) -> &str {
+        &self.name
+    }
+
+    fn execute(&self) -> Result<Step, Box<BGitError>> {
+        // Get API key from environment or provided value
+        let api_key = match &self.api_key {
+            Some(key) => key.clone(),
+            None => std::env::var("GEMINI_API_KEY").map_err(|_| {
+                Box::new(BGitError::new(
+                    "BGitError",
+                    "GEMINI_API_KEY environment variable not set and no API key provided",
+                    crate::bgit_error::BGitErrorWorkflowType::ActionStep,
+                    crate::bgit_error::NO_EVENT,
+                    &self.name,
+                    crate::bgit_error::NO_RULE,
+                ))
+            })?,
+        };
+
+        // Get git diff
+        let diff_content = self.get_git_diff()?;
+
+        if diff_content.trim().is_empty() {
+            return Err(Box::new(BGitError::new(
+                "BGitError",
+                "No changes detected in the repository",
+                crate::bgit_error::BGitErrorWorkflowType::ActionStep,
+                crate::bgit_error::NO_EVENT,
+                &self.name,
+                crate::bgit_error::NO_RULE,
+            )));
+        }
+
+        // Generate commit message using AI
+        let commit_message = self.generate_commit_message(&api_key, &diff_content)?;
+
+        println!("Generated commit message: {}", commit_message);
+
+        // Execute GitCommit with the generated message
+        let git_commit = GitCommit::with_message(commit_message);
+        git_commit.raw_execute()?;
+
+        // Return to ask commit step with generated message
+        Ok(Step::Task(ActionStepTask(Box::new(IsPushedPulled::new()))))
+    }
+}
+
+impl AICommit {
+    /// Create a new AICommit instance with an API key
+    pub fn with_api_key(api_key: String) -> Self {
+        AICommit {
+            name: "ai_commit".to_owned(),
+            api_key: Some(api_key),
+        }
+    }
+
+    /// Get git diff content as string (staged changes)
+    fn get_git_diff(&self) -> Result<String, Box<BGitError>> {
+        let repo = Repository::discover(Path::new(".")).map_err(|e| {
+            Box::new(BGitError::new(
+                "BGitError",
+                &format!("Failed to open repository: {}", e),
+                crate::bgit_error::BGitErrorWorkflowType::ActionStep,
+                crate::bgit_error::NO_EVENT,
+                &self.name,
+                crate::bgit_error::NO_RULE,
+            ))
+        })?;
+
+        let mut diff_opts = DiffOptions::new();
+        diff_opts.include_untracked(false);
+
+        // Get the HEAD tree
+        let head = repo.head().map_err(|e| {
+            Box::new(BGitError::new(
+                "BGitError",
+                &format!("Failed to get HEAD: {}", e),
+                crate::bgit_error::BGitErrorWorkflowType::ActionStep,
+                crate::bgit_error::NO_EVENT,
+                &self.name,
+                crate::bgit_error::NO_RULE,
+            ))
+        })?;
+        let head_tree = head.peel_to_tree().map_err(|e| {
+            Box::new(BGitError::new(
+                "BGitError",
+                &format!("Failed to get HEAD tree: {}", e),
+                crate::bgit_error::BGitErrorWorkflowType::ActionStep,
+                crate::bgit_error::NO_EVENT,
+                &self.name,
+                crate::bgit_error::NO_RULE,
+            ))
+        })?;
+
+        // Get diff between HEAD and index (staging area)
+        let diff = repo
+            .diff_tree_to_index(Some(&head_tree), None, Some(&mut diff_opts))
+            .map_err(|e| {
+                Box::new(BGitError::new(
+                    "BGitError",
+                    &format!("Failed to create diff: {}", e),
+                    crate::bgit_error::BGitErrorWorkflowType::ActionStep,
+                    crate::bgit_error::NO_EVENT,
+                    &self.name,
+                    crate::bgit_error::NO_RULE,
+                ))
+            })?;
+
+        let mut diff_content = String::new();
+
+        diff.print(git2::DiffFormat::Patch, |_delta, _hunk, line| {
+            let line_str = std::str::from_utf8(line.content()).unwrap_or("");
+            match line.origin() {
+                '+' => diff_content.push_str(&format!("+{}", line_str)),
+                '-' => diff_content.push_str(&format!("-{}", line_str)),
+                ' ' => diff_content.push_str(&format!(" {}", line_str)),
+                _ => diff_content.push_str(line_str),
+            }
+            true
+        })
+        .map_err(|e| {
+            Box::new(BGitError::new(
+                "BGitError",
+                &format!("Failed to process diff: {}", e),
+                crate::bgit_error::BGitErrorWorkflowType::ActionStep,
+                crate::bgit_error::NO_EVENT,
+                &self.name,
+                crate::bgit_error::NO_RULE,
+            ))
+        })?;
+
+        Ok(diff_content)
+    }
+
+    /// Generate commit message using Google Gemini AI
+    fn generate_commit_message(
+        &self,
+        api_key: &str,
+        diff_content: &str,
+    ) -> Result<String, Box<BGitError>> {
+        let rt = tokio::runtime::Runtime::new().map_err(|e| {
+            Box::new(BGitError::new(
+                "BGitError",
+                &format!("Failed to create async runtime: {}", e),
+                crate::bgit_error::BGitErrorWorkflowType::ActionStep,
+                crate::bgit_error::NO_EVENT,
+                &self.name,
+                crate::bgit_error::NO_RULE,
+            ))
+        })?;
+
+        rt.block_on(async {
+            self.generate_commit_message_async(api_key, diff_content)
+                .await
+        })
+    }
+
+    async fn generate_commit_message_async(
+        &self,
+        api_key: &str,
+        diff_content: &str,
+    ) -> Result<String, Box<BGitError>> {
+        // Use the same approach as CodeSolutionGenerator - specify the model explicitly
+        let client = Client::new_from_model(Model::Gemini2_0Flash, api_key.to_string());
+
+        let system_prompt = "You are a git commit message generator. Generate concise, conventional commit messages based on git diffs. Follow conventional commit format (type: description). Keep the summary line under 50 characters. Focus on what changed and why.";
+
+        let user_prompt = format!(
+            "Generate a conventional commit message for the following git diff:\n\n{}",
+            diff_content
+        );
+
+        // Create request similar to CodeSolutionGenerator
+        let request = Request {
+            contents: vec![Content {
+                role: Role::User,
+                parts: vec![Part {
+                    text: Some(user_prompt),
+                    inline_data: None,
+                    file_data: None,
+                    video_metadata: None,
+                }],
+            }],
+            tools: vec![],
+            safety_settings: vec![],
+            generation_config: None,
+            system_instruction: Some(SystemInstructionContent {
+                parts: vec![SystemInstructionPart {
+                    text: Some(system_prompt.to_string()),
+                }],
+            }),
+        };
+
+        // Use the same pattern as CodeSolutionGenerator for handling the response
+        let result = client.post(30, &request).await.map_err(|e| {
+            Box::new(BGitError::new(
+                "BGitError",
+                &format!("Failed to generate commit message: {}", e.message),
+                crate::bgit_error::BGitErrorWorkflowType::ActionStep,
+                crate::bgit_error::NO_EVENT,
+                &self.name,
+                crate::bgit_error::NO_RULE,
+            ))
+        })?;
+
+        // Handle the PostResult enum properly
+        match result {
+            PostResult::Rest(response) => {
+                let commit_message = response
+                    .candidates
+                    .first()
+                    .map(|candidate| candidate.content.clone())
+                    .and_then(|content| content.parts.first().cloned())
+                    .and_then(|part| part.text.clone())
+                    .map(|text| text.trim().to_string())
+                    .ok_or_else(|| {
+                        Box::new(BGitError::new(
+                            "BGitError",
+                            "No generated text found in response",
+                            crate::bgit_error::BGitErrorWorkflowType::ActionStep,
+                            crate::bgit_error::NO_EVENT,
+                            &self.name,
+                            crate::bgit_error::NO_RULE,
+                        ))
+                    })?;
+
+                Ok(commit_message)
+            }
+            _ => Err(Box::new(BGitError::new(
+                "BGitError",
+                "Unexpected response type",
+                crate::bgit_error::BGitErrorWorkflowType::ActionStep,
+                crate::bgit_error::NO_EVENT,
+                &self.name,
+                crate::bgit_error::NO_RULE,
+            ))),
+        }
+    }
+}
diff --git a/src/workflows/default/prompt/mod.rs b/src/workflows/default/prompt/mod.rs
index 39b228a..fc1128e 100644
--- a/src/workflows/default/prompt/mod.rs
+++ b/src/workflows/default/prompt/mod.rs
@@ -7,4 +7,6 @@ pub(crate) mod pa06_ask_restore_changes;
 pub(crate) mod pa07_ask_pull_push;
 pub(crate) mod pa08_ask_commit;
 pub(crate) mod pa09_ask_branch_name;
-pub(crate) mod pa10_ask_same_feat;
\ No newline at end of file
+pub(crate) mod pa10_ask_same_feat;
+pub(crate) mod pa11_ask_ai_commit_msg;
+pub(crate) mod pa12_ask_commit_msg;
diff --git a/src/workflows/default/prompt/pa08_ask_commit.rs b/src/workflows/default/prompt/pa08_ask_commit.rs
index 216ceb3..44fa6d7 100644
--- a/src/workflows/default/prompt/pa08_ask_commit.rs
+++ b/src/workflows/default/prompt/pa08_ask_commit.rs
@@ -1,9 +1,12 @@
 use crate::{
     bgit_error::{BGitError, BGitErrorWorkflowType, NO_EVENT, NO_RULE},
-    step::{PromptStep, Step},
+    step::{PromptStep, Step}, workflows::default::action::ta08_is_pulled_pushed::IsPushedPulled,
 };
 use dialoguer::{theme::ColorfulTheme, Select};
-
+use crate::step::ActionStep;
+use crate::step::Task::ActionStepTask;
+use crate::step::Task::PromptStepTask;
+use super::pa11_ask_ai_commit_msg::AskAICommitMessage;
 pub(crate) struct AskCommit {
     name: String,
 }
@@ -40,8 +43,8 @@ impl PromptStep for AskCommit {
             })?;
 
         match selection {
-            0 => Ok(Step::Stop),
-            1 => Ok(Step::Stop),
+            0 => Ok(Step::Task(PromptStepTask(Box::new(AskAICommitMessage::new())))),
+            1 => Ok(Step::Task(ActionStepTask(Box::new(IsPushedPulled::new())))),
             _ => Err(Box::new(BGitError::new(
                 "Invalid selection",
                 "Unexpected selection index in Select prompt.",
diff --git a/src/workflows/default/prompt/pa11_ask_ai_commit_msg.rs b/src/workflows/default/prompt/pa11_ask_ai_commit_msg.rs
new file mode 100644
index 0000000..a834c61
--- /dev/null
+++ b/src/workflows/default/prompt/pa11_ask_ai_commit_msg.rs
@@ -0,0 +1,65 @@
+use super::pa12_ask_commit_msg::AskHumanCommitMessage;
+use crate::step::ActionStep;
+use crate::step::Task::ActionStepTask;
+use crate::step::Task::PromptStepTask;
+use crate::{
+    bgit_error::{BGitError, BGitErrorWorkflowType, NO_EVENT, NO_RULE},
+    step::{PromptStep, Step},
+    workflows::default::action::ta13_ai_commit_msg::AICommit,
+};
+use dialoguer::{theme::ColorfulTheme, Select};
+
+pub(crate) struct AskAICommitMessage {
+    name: String,
+}
+
+impl PromptStep for AskAICommitMessage {
+    fn new() -> Self
+    where
+        Self: Sized,
+    {
+        AskAICommitMessage {
+            name: "ask_ai_commit_message".to_owned(),
+        }
+    }
+
+    fn get_name(&self) -> &str {
+        &self.name
+    }
+
+    fn execute(&self) -> Result<Step, Box<BGitError>> {
+        let selection: usize = Select::with_theme(&ColorfulTheme::default())
+            .with_prompt("Do you want your commit message written by AI?")
+            .default(0)
+            .items(&[
+                "Yes, generate AI commit message",
+                "No, I'll write it myself",
+            ])
+            .interact()
+            .map_err(|e| {
+                Box::new(BGitError::new(
+                    "Input Error",
+                    &e.to_string(),
+                    BGitErrorWorkflowType::PromptStep,
+                    &self.name,
+                    NO_EVENT,
+                    NO_RULE,
+                ))
+            })?;
+
+        match selection {
+            0 => Ok(Step::Task(ActionStepTask(Box::new(AICommit::new())))),
+            1 => Ok(Step::Task(PromptStepTask(Box::new(
+                AskHumanCommitMessage::new(),
+            )))),
+            _ => Err(Box::new(BGitError::new(
+                "Invalid selection",
+                "Unexpected selection index in Select prompt.",
+                BGitErrorWorkflowType::PromptStep,
+                &self.name,
+                NO_EVENT,
+                NO_RULE,
+            ))),
+        }
+    }
+}
diff --git a/src/workflows/default/prompt/pa12_ask_commit_msg.rs b/src/workflows/default/prompt/pa12_ask_commit_msg.rs
new file mode 100644
index 0000000..6908ae6
--- /dev/null
+++ b/src/workflows/default/prompt/pa12_ask_commit_msg.rs
@@ -0,0 +1,63 @@
+use crate::events::git_commit::GitCommit;
+use crate::events::AtomicEvent;
+use crate::step::ActionStep;
+use crate::step::Task::ActionStepTask;
+use crate::workflows::default::action::ta08_is_pulled_pushed::IsPushedPulled;
+use crate::{
+    bgit_error::{BGitError, BGitErrorWorkflowType, NO_EVENT, NO_RULE},
+    step::{PromptStep, Step},
+};
+use dialoguer::{theme::ColorfulTheme, Input};
+pub(crate) struct AskHumanCommitMessage {
+    name: String,
+}
+
+impl PromptStep for AskHumanCommitMessage {
+    fn new() -> Self
+    where
+        Self: Sized,
+    {
+        AskHumanCommitMessage {
+            name: "ask_human_commit_message".to_owned(),
+        }
+    }
+
+    fn get_name(&self) -> &str {
+        &self.name
+    }
+
+    fn execute(&self) -> Result<Step, Box<BGitError>> {
+        let commit_message: String = Input::with_theme(&ColorfulTheme::default())
+            .with_prompt("Enter your commit message")
+            .interact_text()
+            .map_err(|e| {
+                Box::new(BGitError::new(
+                    "Input Error",
+                    &e.to_string(),
+                    BGitErrorWorkflowType::PromptStep,
+                    &self.name,
+                    NO_EVENT,
+                    NO_RULE,
+                ))
+            })?;
+
+        // Check if commit message is empty
+        if commit_message.trim().is_empty() {
+            return Err(Box::new(BGitError::new(
+                "Empty commit message",
+                "Commit message cannot be empty.",
+                BGitErrorWorkflowType::PromptStep,
+                &self.name,
+                NO_EVENT,
+                NO_RULE,
+            )));
+        }
+
+        // Execute git commit with the provided message
+        let git_commit = GitCommit::with_message(commit_message);
+        git_commit.raw_execute()?;
+
+        // Return to next step (IsPushedPulled)
+        Ok(Step::Task(ActionStepTask(Box::new(IsPushedPulled::new()))))
+    }
+}
